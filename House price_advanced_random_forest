# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score, KFold, GridSearchCV
from sklearn.preprocessing import LabelEncoder, PolynomialFeatures
import matplotlib.pyplot as plt
import seaborn as sns

# We have 80 features
df = pd.read_csv('/Users/igormishurov/Documents/house-prices-advanced-regression-techniques/train.csv')
y = df['SalePrice']
df = df.drop(['SalePrice', 'Id'], axis = 1)
encoder = LabelEncoder()

object_columns = []
for i in df.columns:
    if (df[i].dtype == 'object'):
        df[i] = df[i].fillna('972')
        df[i] = encoder.fit_transform(df[i])
        object_columns.append(i)
    elif((df[i].dtype == 'int64') | (df[i].dtype == 'float64')):
        df[i] = df[i].fillna(972)


X_train, X_test, y_train, y_test = train_test_split(df, y)
rf = RandomForestRegressor()
rf.fit(X_train, y_train)
rf.score(X_test, y_test)

params = {'max_depth' : [130, 140, 150, 250], 'n_estimators' : [100, 300, 400, 500]}    
k_fold = KFold(n_splits=5)
best_model = GridSearchCV(RandomForestRegressor(), params, cv = k_fold)
best_model.fit(X_train, y_train)
print("Mean score: ", best_model.score(X_test, y_test))
print("Best Random Forest: ", best_model.best_params_)






# %%

print(best_model.best_params_)
